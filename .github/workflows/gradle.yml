name: CI/CD with Docker & CodeDeploy

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Copy Secret
        env:
          OCCUPY_SECRET: ${{ secrets.OCCUPY_SECRET }}
          OCCUPY_SECRET_DIR: src/main/resources
          OCCUPY_SECRET_DIR_FILE_NAME: application-secret.yml
        run: echo $OCCUPY_SECRET | base64 --decode > $OCCUPY_SECRET_DIR/$OCCUPY_SECRET_DIR_FILE_NAME

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v4

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Gradle build
        run: ./gradlew clean build -x test

      # ── 필수 파일 존재 확인 ───────────────────────────
      - name: Validate deployment files
        run: |
          test -f appspec.yml || (echo "appspec.yml not found" && exit 1)
          if [ -d scripts ]; then
            chmod +x scripts/* || true
          else
            echo "WARN: scripts/ not found (ensure lifecycle hooks don't expect scripts)"
          fi

      # ── 배포 번들 구성 ───────────────────────────────
      - name: Make deploy bundle
        shell: bash
        run: |
          set -euo pipefail
          rm -rf deploy && mkdir -p deploy/scripts
          # JAR 하나만 선택(plain 제외), 존재하면 포함
          JAR="$(ls -1 build/libs/*.jar 2>/dev/null | grep -v -- '-plain' | head -n 1 || true)"
          if [ -n "${JAR}" ]; then cp "$JAR" deploy/app.jar; fi
          # Docker/Compose 파일 있으면 포함
          [ -f Dockerfile ] && cp Dockerfile deploy/
          [ -f docker-compose.yml ] && cp docker-compose.yml deploy/
          # CodeDeploy 필수 파일
          cp appspec.yml deploy/
          # 배포 스크립트
          if [ -d scripts ]; then cp -r scripts/* deploy/scripts/; fi
          # zip 생성 (루트에 appspec.yml 필수)
          (cd deploy && zip -r ../bundle.zip .)

      # (선택) 번들 아티팩트 보관
      - name: Upload bundle artifact
        uses: actions/upload-artifact@v4
        with:
          name: bundle
          path: bundle.zip
          if-no-files-found: error
          retention-days: 7

      # ── AWS 자격 증명 + CLI 설치 ─────────────────────
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Setup AWS CLI
        uses: aws-actions/aws-cli-setup@v2

      # ── S3 업로드 (고유 키로) ─────────────────────────
      - name: Upload to S3
        env:
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}  # 예: siso-deploy
          BUNDLE_KEY: releases/bundle-${{ github.sha }}.zip
        run: aws s3 cp ./bundle.zip "s3://$S3_BUCKET_NAME/$BUNDLE_KEY"

      # ── CodeDeploy 트리거 (메인만 배포) ───────────────
      - name: Create CodeDeploy deployment
        if: github.ref == 'refs/heads/main'
        env:
          APPLICATION_NAME: siso
          DEPLOYMENT_GROUP_NAME: siso-group
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          BUNDLE_KEY: releases/bundle-${{ github.sha }}.zip
        run: |
          aws deploy create-deployment \
            --application-name "$APPLICATION_NAME" \
            --deployment-group-name "$DEPLOYMENT_GROUP_NAME" \
            --file-exists-behavior OVERWRITE \
            --s3-location bucket="$S3_BUCKET_NAME",bundleType=zip,key="$BUNDLE_KEY" \
            --region ap-northeast-2
