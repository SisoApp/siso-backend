name: CI/CD with Docker & CodeDeploy

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

# 동시에 여러 배포 파이프라인이 겹치지 않도록 직렬화
concurrency:
  group: deploy-prod
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Firebase Admin 키 주입 (리포 체크아웃 후)
      - name: Set up Firebase Admin Key
        run: |
          mkdir -p src/main/resources/firebase
          echo '${{ secrets.FIREBASE_ADMIN_KEY }}' > src/main/resources/firebase/firebase-admin-key.json

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v4

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 필요 시 테스트 제외(-x test) 조정
      - name: Gradle build
        run: ./gradlew clean build -x test

      # 필수 파일 점검 + 스크립트 실행권한 보장
      - name: Validate deployment files
        run: |
          test -f appspec.yml || (echo "appspec.yml not found" && exit 1)
          if [ -d scripts ]; then
            chmod +x scripts/* || true
          else
            echo "WARN: scripts/ not found (ensure hooks don't expect scripts)"
          fi

      # ── 배포 번들 구성 ───────────────────────────────
      - name: Make deploy bundle
        shell: bash
        run: |
          set -euo pipefail
          rm -rf deploy && mkdir -p deploy/scripts
          # JAR 1개만 선택(plain 제외), 존재하면 포함
          JAR="$(ls -1 build/libs/*.jar 2>/dev/null | grep -v -- '-plain' | head -n 1 || true)"
          if [ -n "${JAR}" ]; then cp "$JAR" deploy/app.jar; fi
          # Docker/Compose 파일 있으면 포함
          [ -f Dockerfile ] && cp Dockerfile deploy/
          [ -f docker-compose.yml ] && cp docker-compose.yml deploy/
          # CodeDeploy 필수 파일
          cp appspec.yml deploy/
          # 배포 스크립트
          if [ -d scripts ]; then cp -r scripts/* deploy/scripts/; fi
          # zip 생성 (루트에 appspec.yml 필수)
          (cd deploy && zip -r ../bundle.zip .)

      # (선택) 번들 아티팩트 보관 — 실패 시 디버깅 용이
      - name: Upload bundle artifact
        uses: actions/upload-artifact@v4
        with:
          name: bundle
          path: bundle.zip
          if-no-files-found: error
          retention-days: 7

      # ── AWS 자격 증명 + CLI 설치 ─────────────────────
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Setup AWS CLI
        uses: aws-actions/aws-cli-setup@v2

      # ── S3 업로드 (커밋SHA로 고유화) ──────────────────
      - name: Upload to S3
        env:
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}  # 예: siso-deploy
          BUNDLE_KEY: releases/bundle-${{ github.sha }}.zip
        run: aws s3 cp ./bundle.zip "s3://$S3_BUCKET_NAME/$BUNDLE_KEY"

      # ── 기존 진행 중 배포가 있으면 종료까지 대기 ─────
      - name: Wait for active deployment (if any)
        env:
          APPLICATION_NAME: siso
          DEPLOYMENT_GROUP_NAME: siso-group
        run: |
          ACTIVE_ID=$(aws deploy list-deployments \
            --application-name "$APPLICATION_NAME" \
            --deployment-group-name "$DEPLOYMENT_GROUP_NAME" \
            --include-only-statuses Created Queued InProgress \
            --query "deployments[0]" --output text || echo "None")

          if [ "$ACTIVE_ID" != "None" ] && [ -n "$ACTIVE_ID" ]; then
            echo "Another deployment is active: $ACTIVE_ID. Waiting for it to finish..."
            aws deploy wait deployment-success --deployment-id "$ACTIVE_ID" || \
            aws deploy wait deployment-failed --deployment-id "$ACTIVE_ID" || true
          else
            echo "No active deployment. Proceeding."
          fi

      # ── CodeDeploy 트리거 (메인만 배포하고, 완료까지 대기) ──
      - name: Create CodeDeploy deployment
        if: github.ref == 'refs/heads/main'
        env:
          APPLICATION_NAME: siso
          DEPLOYMENT_GROUP_NAME: siso-group
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          BUNDLE_KEY: releases/bundle-${{ github.sha }}.zip
        run: |
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name "$APPLICATION_NAME" \
            --deployment-group-name "$DEPLOYMENT_GROUP_NAME" \
            --file-exists-behavior OVERWRITE \
            --s3-location bucket="$S3_BUCKET_NAME",bundleType=zip,key="$BUNDLE_KEY" \
            --region ap-northeast-2 \
            --query "deploymentId" --output text)

          echo "Deployment ID: $DEPLOYMENT_ID"
          aws deploy wait deployment-success --deployment-id "$DEPLOYMENT_ID"
